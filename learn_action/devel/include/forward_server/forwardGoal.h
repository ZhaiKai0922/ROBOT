// Generated by gencpp from file forward_server/forwardGoal.msg
// DO NOT EDIT!


#ifndef FORWARD_SERVER_MESSAGE_FORWARDGOAL_H
#define FORWARD_SERVER_MESSAGE_FORWARDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace forward_server
{
template <class ContainerAllocator>
struct forwardGoal_
{
  typedef forwardGoal_<ContainerAllocator> Type;

  forwardGoal_()
    : line(0.0)
    , line_velocity(0.0)
    , time_out(0.0)  {
    }
  forwardGoal_(const ContainerAllocator& _alloc)
    : line(0.0)
    , line_velocity(0.0)
    , time_out(0.0)  {
  (void)_alloc;
    }



   typedef double _line_type;
  _line_type line;

   typedef double _line_velocity_type;
  _line_velocity_type line_velocity;

   typedef double _time_out_type;
  _time_out_type time_out;





  typedef boost::shared_ptr< ::forward_server::forwardGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::forward_server::forwardGoal_<ContainerAllocator> const> ConstPtr;

}; // struct forwardGoal_

typedef ::forward_server::forwardGoal_<std::allocator<void> > forwardGoal;

typedef boost::shared_ptr< ::forward_server::forwardGoal > forwardGoalPtr;
typedef boost::shared_ptr< ::forward_server::forwardGoal const> forwardGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::forward_server::forwardGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::forward_server::forwardGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace forward_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'forward_server': ['/home/zhx/zk/learn_action/devel/share/forward_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::forward_server::forwardGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::forward_server::forwardGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::forward_server::forwardGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::forward_server::forwardGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forward_server::forwardGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::forward_server::forwardGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::forward_server::forwardGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ea14902e630c8a1c9802214171cc9f0";
  }

  static const char* value(const ::forward_server::forwardGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ea14902e630c8a1ULL;
  static const uint64_t static_value2 = 0xc9802214171cc9f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::forward_server::forwardGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "forward_server/forwardGoal";
  }

  static const char* value(const ::forward_server::forwardGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::forward_server::forwardGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
float64 line\n\
float64 line_velocity\n\
float64 time_out\n\
";
  }

  static const char* value(const ::forward_server::forwardGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::forward_server::forwardGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.line);
      stream.next(m.line_velocity);
      stream.next(m.time_out);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct forwardGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::forward_server::forwardGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::forward_server::forwardGoal_<ContainerAllocator>& v)
  {
    s << indent << "line: ";
    Printer<double>::stream(s, indent + "  ", v.line);
    s << indent << "line_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.line_velocity);
    s << indent << "time_out: ";
    Printer<double>::stream(s, indent + "  ", v.time_out);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FORWARD_SERVER_MESSAGE_FORWARDGOAL_H
