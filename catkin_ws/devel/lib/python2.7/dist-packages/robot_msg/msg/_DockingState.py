# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msg/DockingState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DockingState(genpy.Message):
  _md5sum = "d0cea54154831428974ca314f83a5bb0"
  _type = "robot_msg/DockingState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# msg definition

# constants state enum
int32 NONE              = 0 #初始化状态
int32 SEARCHING_STATION = 1 # 1-寻找充电桩
int32 DOCKING_STATION   = 2 # 2-对接中
int32 DOCKING_SUCCESS   = 3 # 3-对接成功
int32 SEARCHING_FAILURE = 4 # 4-失败-未找到充电桩
int32 DOCKING_FAILURE   = 5 # 5-失败-对接失败
int32 CANCLED           = 6 # 6-成功-动作被取消

# fields
int32 		docking_state  #机器人回充状态

"""
  # Pseudo-constants
  NONE = 0
  SEARCHING_STATION = 1
  DOCKING_STATION = 2
  DOCKING_SUCCESS = 3
  SEARCHING_FAILURE = 4
  DOCKING_FAILURE = 5
  CANCLED = 6

  __slots__ = ['docking_state']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       docking_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DockingState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.docking_state is None:
        self.docking_state = 0
    else:
      self.docking_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.docking_state
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.docking_state,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.docking_state
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.docking_state,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
