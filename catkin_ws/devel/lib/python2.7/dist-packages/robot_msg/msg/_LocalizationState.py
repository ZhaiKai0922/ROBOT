# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msg/LocalizationState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LocalizationState(genpy.Message):
  _md5sum = "1ce43e83728f9fa44734aa425fdc622d"
  _type = "robot_msg/LocalizationState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# msg definition 对Android

# localization state enum
int32 NONE         = 0 # 初始化
int32 MAP_BUILDING = 1 # 建图中
int32 LOCATING     = 2 # 定位中
int32 SUCCESS      = 3 # 定位成功
int32 FAILURE      = 4 # 定位失败
int32 MAP_SAVING   = 5 # 地图保存中

int32 		        localization_state      # 机器人定位状态
int32                   floor                   # 机器人当前所处楼层
geometry_msgs/Vector3 	global_pose             # 机器人全局位置坐标，(x，y，thete)
float32                 score                   # 得分
float32                 progress                # 地图保存进度，100%为已保存状态

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  NONE = 0
  MAP_BUILDING = 1
  LOCATING = 2
  SUCCESS = 3
  FAILURE = 4
  MAP_SAVING = 5

  __slots__ = ['localization_state','floor','global_pose','score','progress']
  _slot_types = ['int32','int32','geometry_msgs/Vector3','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       localization_state,floor,global_pose,score,progress

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalizationState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.localization_state is None:
        self.localization_state = 0
      if self.floor is None:
        self.floor = 0
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.Vector3()
      if self.score is None:
        self.score = 0.
      if self.progress is None:
        self.progress = 0.
    else:
      self.localization_state = 0
      self.floor = 0
      self.global_pose = geometry_msgs.msg.Vector3()
      self.score = 0.
      self.progress = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3d2f().pack(_x.localization_state, _x.floor, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.score, _x.progress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.localization_state, _x.floor, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.score, _x.progress,) = _get_struct_2i3d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3d2f().pack(_x.localization_state, _x.floor, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.score, _x.progress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.global_pose is None:
        self.global_pose = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.localization_state, _x.floor, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.score, _x.progress,) = _get_struct_2i3d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3d2f = None
def _get_struct_2i3d2f():
    global _struct_2i3d2f
    if _struct_2i3d2f is None:
        _struct_2i3d2f = struct.Struct("<2i3d2f")
    return _struct_2i3d2f
