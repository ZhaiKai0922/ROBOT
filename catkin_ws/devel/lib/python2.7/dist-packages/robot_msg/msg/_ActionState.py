# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msg/ActionState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionState(genpy.Message):
  _md5sum = "6a5aedc175e4d4597fe604ea49d45b40"
  _type = "robot_msg/ActionState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# msg definition

#   action_state_id: 								
#	“idle”			    - 空闲		
#	“sleep”			    - 休眠		
#	“movebase_goal”	    - 导航到目标点		
#	”rotate”		    - 旋转一定角度（body系）	
#   “rotate_to”		    - 旋转到指定朝向（world系）
#	“go_charging”	    - 返回充电				
# 	“separate_docker”	- 脱离充电桩		
#	“remote_telep”	    - 远程遥控

# feedback enum
int32 NONE              = 0 # none
int32 SET_NEW_GOAL      = 1 # 收到指令
int32 RUNNING           = 2 # 动作执行中
int32 GOAL_REACHED      = 3 # 成功 - 目标达到
int32 GOAL_CANCLE       = 4 # 成功 - 目标被取消
int32 OBSTACLE          = 5 # 失败 - 存在障碍物
int32 NO_PATH           = 6 # 失败 - 没有可行路径
int32 DOCKER_NOTFOUND   = 7 # 失败 - 未找到充电桩
int32 DOCKING_FAILURE   = 8 # 失败 - 对接失败
int32 ERROR_NODEFINE    = 9 # 失败 - 其他异常 STUCK

string 		    action_state_id  	# 机器人所处功能状态id
int32           action_feedback 	# 动作执行实时状态反馈

"""
  # Pseudo-constants
  NONE = 0
  SET_NEW_GOAL = 1
  RUNNING = 2
  GOAL_REACHED = 3
  GOAL_CANCLE = 4
  OBSTACLE = 5
  NO_PATH = 6
  DOCKER_NOTFOUND = 7
  DOCKING_FAILURE = 8
  ERROR_NODEFINE = 9

  __slots__ = ['action_state_id','action_feedback']
  _slot_types = ['string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_state_id,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_state_id is None:
        self.action_state_id = ''
      if self.action_feedback is None:
        self.action_feedback = 0
    else:
      self.action_state_id = ''
      self.action_feedback = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.action_state_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_state_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_state_id = str[start:end]
      start = end
      end += 4
      (self.action_feedback,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.action_state_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_state_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_state_id = str[start:end]
      start = end
      end += 4
      (self.action_feedback,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
