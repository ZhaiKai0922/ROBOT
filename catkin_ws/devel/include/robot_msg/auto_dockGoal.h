// Generated by gencpp from file robot_msg/auto_dockGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_AUTO_DOCKGOAL_H
#define ROBOT_MSG_MESSAGE_AUTO_DOCKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct auto_dockGoal_
{
  typedef auto_dockGoal_<ContainerAllocator> Type;

  auto_dockGoal_()
    : dock_ctrl(false)  {
    }
  auto_dockGoal_(const ContainerAllocator& _alloc)
    : dock_ctrl(false)  {
  (void)_alloc;
    }



   typedef uint8_t _dock_ctrl_type;
  _dock_ctrl_type dock_ctrl;





  typedef boost::shared_ptr< ::robot_msg::auto_dockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::auto_dockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct auto_dockGoal_

typedef ::robot_msg::auto_dockGoal_<std::allocator<void> > auto_dockGoal;

typedef boost::shared_ptr< ::robot_msg::auto_dockGoal > auto_dockGoalPtr;
typedef boost::shared_ptr< ::robot_msg::auto_dockGoal const> auto_dockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::auto_dockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::auto_dockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::auto_dockGoal_<ContainerAllocator1> & lhs, const ::robot_msg::auto_dockGoal_<ContainerAllocator2> & rhs)
{
  return lhs.dock_ctrl == rhs.dock_ctrl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::auto_dockGoal_<ContainerAllocator1> & lhs, const ::robot_msg::auto_dockGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::auto_dockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::auto_dockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::auto_dockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "707c69bbc0bc4f40c0919c57f56fb522";
  }

  static const char* value(const ::robot_msg::auto_dockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x707c69bbc0bc4f40ULL;
  static const uint64_t static_value2 = 0xc0919c57f56fb522ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/auto_dockGoal";
  }

  static const char* value(const ::robot_msg::auto_dockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# 定义目标goal\n"
"bool dock_ctrl  # 对接控制    true 去充电 false 取消充电\n"
"\n"
;
  }

  static const char* value(const ::robot_msg::auto_dockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dock_ctrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct auto_dockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::auto_dockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::auto_dockGoal_<ContainerAllocator>& v)
  {
    s << indent << "dock_ctrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_ctrl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_AUTO_DOCKGOAL_H
