// Generated by gencpp from file robot_msg/SetRestrictRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_SETRESTRICTREQUEST_H
#define ROBOT_MSG_MESSAGE_SETRESTRICTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msg/Restrict.h>

namespace robot_msg
{
template <class ContainerAllocator>
struct SetRestrictRequest_
{
  typedef SetRestrictRequest_<ContainerAllocator> Type;

  SetRestrictRequest_()
    : cmd()
    , virtual_walls()  {
    }
  SetRestrictRequest_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , virtual_walls(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;

   typedef std::vector< ::robot_msg::Restrict_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_msg::Restrict_<ContainerAllocator> >::other >  _virtual_walls_type;
  _virtual_walls_type virtual_walls;





  typedef boost::shared_ptr< ::robot_msg::SetRestrictRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::SetRestrictRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRestrictRequest_

typedef ::robot_msg::SetRestrictRequest_<std::allocator<void> > SetRestrictRequest;

typedef boost::shared_ptr< ::robot_msg::SetRestrictRequest > SetRestrictRequestPtr;
typedef boost::shared_ptr< ::robot_msg::SetRestrictRequest const> SetRestrictRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::SetRestrictRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::SetRestrictRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetRestrictRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.virtual_walls == rhs.virtual_walls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::SetRestrictRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetRestrictRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetRestrictRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetRestrictRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetRestrictRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8721109f65c1f125e6ca905444ba0340";
  }

  static const char* value(const ::robot_msg::SetRestrictRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8721109f65c1f125ULL;
  static const uint64_t static_value2 = 0xe6ca905444ba0340ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/SetRestrictRequest";
  }

  static const char* value(const ::robot_msg::SetRestrictRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# srv definition\n"
"\n"
"#request constants\n"
"\n"
"#   \"add\"      添加\n"
"#   \"remove\"   移除\n"
"#   \"clean\"    清除所有限制层文件\n"
"\n"
"#request fields\n"
"string                  cmd                          # 操作命令\n"
"robot_msg/Restrict[]    virtual_walls                # 虚拟墙描述\n"
"\n"
"================================================================================\n"
"MSG: robot_msg/Restrict\n"
"# msg definition\n"
"\n"
"# virtual walls e.g.\n"
"\n"
"int32                   id          # id\n"
"geometry_msgs/Polygon   polygon       # Clockwise\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::robot_msg::SetRestrictRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.virtual_walls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRestrictRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::SetRestrictRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::SetRestrictRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "virtual_walls[]" << std::endl;
    for (size_t i = 0; i < v.virtual_walls.size(); ++i)
    {
      s << indent << "  virtual_walls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_msg::Restrict_<ContainerAllocator> >::stream(s, indent + "    ", v.virtual_walls[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_SETRESTRICTREQUEST_H
