// Generated by gencpp from file robot_msg/DockingState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_DOCKINGSTATE_H
#define ROBOT_MSG_MESSAGE_DOCKINGSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct DockingState_
{
  typedef DockingState_<ContainerAllocator> Type;

  DockingState_()
    : docking_state(0)  {
    }
  DockingState_(const ContainerAllocator& _alloc)
    : docking_state(0)  {
  (void)_alloc;
    }



   typedef int32_t _docking_state_type;
  _docking_state_type docking_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(SEARCHING_STATION)
  #undef SEARCHING_STATION
#endif
#if defined(_WIN32) && defined(DOCKING_STATION)
  #undef DOCKING_STATION
#endif
#if defined(_WIN32) && defined(DOCKING_SUCCESS)
  #undef DOCKING_SUCCESS
#endif
#if defined(_WIN32) && defined(SEARCHING_FAILURE)
  #undef SEARCHING_FAILURE
#endif
#if defined(_WIN32) && defined(DOCKING_FAILURE)
  #undef DOCKING_FAILURE
#endif
#if defined(_WIN32) && defined(CANCLED)
  #undef CANCLED
#endif

  enum {
    NONE = 0,
    SEARCHING_STATION = 1,
    DOCKING_STATION = 2,
    DOCKING_SUCCESS = 3,
    SEARCHING_FAILURE = 4,
    DOCKING_FAILURE = 5,
    CANCLED = 6,
  };


  typedef boost::shared_ptr< ::robot_msg::DockingState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::DockingState_<ContainerAllocator> const> ConstPtr;

}; // struct DockingState_

typedef ::robot_msg::DockingState_<std::allocator<void> > DockingState;

typedef boost::shared_ptr< ::robot_msg::DockingState > DockingStatePtr;
typedef boost::shared_ptr< ::robot_msg::DockingState const> DockingStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::DockingState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::DockingState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::DockingState_<ContainerAllocator1> & lhs, const ::robot_msg::DockingState_<ContainerAllocator2> & rhs)
{
  return lhs.docking_state == rhs.docking_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::DockingState_<ContainerAllocator1> & lhs, const ::robot_msg::DockingState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::DockingState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::DockingState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::DockingState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::DockingState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::DockingState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::DockingState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::DockingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0cea54154831428974ca314f83a5bb0";
  }

  static const char* value(const ::robot_msg::DockingState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0cea54154831428ULL;
  static const uint64_t static_value2 = 0x974ca314f83a5bb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::DockingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/DockingState";
  }

  static const char* value(const ::robot_msg::DockingState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::DockingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# msg definition\n"
"\n"
"# constants state enum\n"
"int32 NONE              = 0 #初始化状态\n"
"int32 SEARCHING_STATION = 1 # 1-寻找充电桩\n"
"int32 DOCKING_STATION   = 2 # 2-对接中\n"
"int32 DOCKING_SUCCESS   = 3 # 3-对接成功\n"
"int32 SEARCHING_FAILURE = 4 # 4-失败-未找到充电桩\n"
"int32 DOCKING_FAILURE   = 5 # 5-失败-对接失败\n"
"int32 CANCLED           = 6 # 6-成功-动作被取消\n"
"\n"
"# fields\n"
"int32 		docking_state  #机器人回充状态\n"
"\n"
;
  }

  static const char* value(const ::robot_msg::DockingState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::DockingState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.docking_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockingState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::DockingState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::DockingState_<ContainerAllocator>& v)
  {
    s << indent << "docking_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.docking_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_DOCKINGSTATE_H
