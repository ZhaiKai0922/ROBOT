// Generated by gencpp from file robot_msg/auto_dockResult.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_AUTO_DOCKRESULT_H
#define ROBOT_MSG_MESSAGE_AUTO_DOCKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct auto_dockResult_
{
  typedef auto_dockResult_<ContainerAllocator> Type;

  auto_dockResult_()
    : dock_result(false)  {
    }
  auto_dockResult_(const ContainerAllocator& _alloc)
    : dock_result(false)  {
  (void)_alloc;
    }



   typedef uint8_t _dock_result_type;
  _dock_result_type dock_result;





  typedef boost::shared_ptr< ::robot_msg::auto_dockResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::auto_dockResult_<ContainerAllocator> const> ConstPtr;

}; // struct auto_dockResult_

typedef ::robot_msg::auto_dockResult_<std::allocator<void> > auto_dockResult;

typedef boost::shared_ptr< ::robot_msg::auto_dockResult > auto_dockResultPtr;
typedef boost::shared_ptr< ::robot_msg::auto_dockResult const> auto_dockResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::auto_dockResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::auto_dockResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::auto_dockResult_<ContainerAllocator1> & lhs, const ::robot_msg::auto_dockResult_<ContainerAllocator2> & rhs)
{
  return lhs.dock_result == rhs.dock_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::auto_dockResult_<ContainerAllocator1> & lhs, const ::robot_msg::auto_dockResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::auto_dockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::auto_dockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::auto_dockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::auto_dockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::auto_dockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::auto_dockResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::auto_dockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5866644dacda9697b265accfd12fe68e";
  }

  static const char* value(const ::robot_msg::auto_dockResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5866644dacda9697ULL;
  static const uint64_t static_value2 = 0xb265accfd12fe68eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::auto_dockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/auto_dockResult";
  }

  static const char* value(const ::robot_msg::auto_dockResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::auto_dockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result 回充结果\n"
"bool dock_result       # 成功１　失败０\n"
"\n"
;
  }

  static const char* value(const ::robot_msg::auto_dockResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::auto_dockResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dock_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct auto_dockResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::auto_dockResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::auto_dockResult_<ContainerAllocator>& v)
  {
    s << indent << "dock_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_AUTO_DOCKRESULT_H
