// Generated by gencpp from file robot_msg/BaseInfo.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_BASEINFO_H
#define ROBOT_MSG_MESSAGE_BASEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct BaseInfo_
{
  typedef BaseInfo_<ContainerAllocator> Type;

  BaseInfo_()
    : connected(false)
    , base_device_state(0)
    , cliff_left(false)
    , cliff_front_left(false)
    , cliff_front_right(false)
    , cliff_right(false)
    , bump_state_left(false)
    , bump_state_right(false)
    , chargingVol(0)
    , chargingState(0)
    , motor_left_err_code(0)
    , motor_right_err_code(0)
    , bump_enable(false)
    , cliff_enable(false)  {
    }
  BaseInfo_(const ContainerAllocator& _alloc)
    : connected(false)
    , base_device_state(0)
    , cliff_left(false)
    , cliff_front_left(false)
    , cliff_front_right(false)
    , cliff_right(false)
    , bump_state_left(false)
    , bump_state_right(false)
    , chargingVol(0)
    , chargingState(0)
    , motor_left_err_code(0)
    , motor_right_err_code(0)
    , bump_enable(false)
    , cliff_enable(false)  {
  (void)_alloc;
    }



   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint8_t _base_device_state_type;
  _base_device_state_type base_device_state;

   typedef uint8_t _cliff_left_type;
  _cliff_left_type cliff_left;

   typedef uint8_t _cliff_front_left_type;
  _cliff_front_left_type cliff_front_left;

   typedef uint8_t _cliff_front_right_type;
  _cliff_front_right_type cliff_front_right;

   typedef uint8_t _cliff_right_type;
  _cliff_right_type cliff_right;

   typedef uint8_t _bump_state_left_type;
  _bump_state_left_type bump_state_left;

   typedef uint8_t _bump_state_right_type;
  _bump_state_right_type bump_state_right;

   typedef uint16_t _chargingVol_type;
  _chargingVol_type chargingVol;

   typedef uint8_t _chargingState_type;
  _chargingState_type chargingState;

   typedef uint16_t _motor_left_err_code_type;
  _motor_left_err_code_type motor_left_err_code;

   typedef uint16_t _motor_right_err_code_type;
  _motor_right_err_code_type motor_right_err_code;

   typedef uint8_t _bump_enable_type;
  _bump_enable_type bump_enable;

   typedef uint8_t _cliff_enable_type;
  _cliff_enable_type cliff_enable;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEVICE_EMERGENCY)
  #undef DEVICE_EMERGENCY
#endif
#if defined(_WIN32) && defined(ROS_NO_CMD)
  #undef ROS_NO_CMD
#endif
#if defined(_WIN32) && defined(DRIVER_LOST)
  #undef DRIVER_LOST
#endif
#if defined(_WIN32) && defined(IMU_LOST)
  #undef IMU_LOST
#endif
#if defined(_WIN32) && defined(RELEASE_MOTOR)
  #undef RELEASE_MOTOR
#endif
#if defined(_WIN32) && defined(BMS_LOST)
  #undef BMS_LOST
#endif
#if defined(_WIN32) && defined(UNCHARGING)
  #undef UNCHARGING
#endif
#if defined(_WIN32) && defined(CHARGING)
  #undef CHARGING
#endif
#if defined(_WIN32) && defined(DOCK_IN)
  #undef DOCK_IN
#endif

  enum {
    DEVICE_EMERGENCY = 1u,
    ROS_NO_CMD = 2u,
    DRIVER_LOST = 4u,
    IMU_LOST = 8u,
    RELEASE_MOTOR = 16u,
    BMS_LOST = 32u,
    UNCHARGING = 0u,
    CHARGING = 1u,
    DOCK_IN = 2u,
  };


  typedef boost::shared_ptr< ::robot_msg::BaseInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::BaseInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BaseInfo_

typedef ::robot_msg::BaseInfo_<std::allocator<void> > BaseInfo;

typedef boost::shared_ptr< ::robot_msg::BaseInfo > BaseInfoPtr;
typedef boost::shared_ptr< ::robot_msg::BaseInfo const> BaseInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::BaseInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::BaseInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::BaseInfo_<ContainerAllocator1> & lhs, const ::robot_msg::BaseInfo_<ContainerAllocator2> & rhs)
{
  return lhs.connected == rhs.connected &&
    lhs.base_device_state == rhs.base_device_state &&
    lhs.cliff_left == rhs.cliff_left &&
    lhs.cliff_front_left == rhs.cliff_front_left &&
    lhs.cliff_front_right == rhs.cliff_front_right &&
    lhs.cliff_right == rhs.cliff_right &&
    lhs.bump_state_left == rhs.bump_state_left &&
    lhs.bump_state_right == rhs.bump_state_right &&
    lhs.chargingVol == rhs.chargingVol &&
    lhs.chargingState == rhs.chargingState &&
    lhs.motor_left_err_code == rhs.motor_left_err_code &&
    lhs.motor_right_err_code == rhs.motor_right_err_code &&
    lhs.bump_enable == rhs.bump_enable &&
    lhs.cliff_enable == rhs.cliff_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::BaseInfo_<ContainerAllocator1> & lhs, const ::robot_msg::BaseInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::BaseInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::BaseInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::BaseInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::BaseInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::BaseInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::BaseInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::BaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3067a4347f837a8395157fa5164b6588";
  }

  static const char* value(const ::robot_msg::BaseInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3067a4347f837a83ULL;
  static const uint64_t static_value2 = 0x95157fa5164b6588ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::BaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/BaseInfo";
  }

  static const char* value(const ::robot_msg::BaseInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::BaseInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# msg definition\n"
"# base_device_state enum\n"
"uint8   DEVICE_EMERGENCY    = 1 # 急停按下\n"
"uint8   ROS_NO_CMD          = 2 # 未收到ros指令\n"
"uint8   DRIVER_LOST         = 4 # 驱动器无响应\n"
"uint8   IMU_LOST            = 8 # imu无响应\n"
"uint8   RELEASE_MOTOR       = 16 # 电机下电失能\n"
"uint8   BMS_LOST            = 32 # bms无响应\n"
"\n"
"# charging State enum\n"
"uint8   UNCHARGING          = 0 # 未充电\n"
"uint8   CHARGING            = 1 # 充电中\n"
"uint8   DOCK_IN             = 2 # 接触，未充电\n"
"\n"
"bool        connected               #   底盘连接状态\n"
"uint8       base_device_state       #   底盘基本外设状态\n"
"bool        cliff_left              #   左跌落\n"
"bool        cliff_front_left        #   前左\n"
"bool        cliff_front_right       #   前右\n"
"bool        cliff_right             #   右跌落\n"
"bool        bump_state_left         #   左碰撞\n"
"bool        bump_state_right        #   右碰撞\n"
"uint16      chargingVol             #   充电电压  10mv\n"
"uint8       chargingState           #   充电状态\n"
"uint16      motor_left_err_code     #   电机错误码\n"
"uint16      motor_right_err_code    #\n"
"bool        bump_enable             #   碰撞传感器使能\n"
"bool        cliff_enable            #   跌落使能\n"
"#uint32[]    adc_channal             #   ADC传感器通道值，跌落传感器等\n"
"#uint32[]    range_sensors           #   超声 tof数据等\n"
;
  }

  static const char* value(const ::robot_msg::BaseInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::BaseInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connected);
      stream.next(m.base_device_state);
      stream.next(m.cliff_left);
      stream.next(m.cliff_front_left);
      stream.next(m.cliff_front_right);
      stream.next(m.cliff_right);
      stream.next(m.bump_state_left);
      stream.next(m.bump_state_right);
      stream.next(m.chargingVol);
      stream.next(m.chargingState);
      stream.next(m.motor_left_err_code);
      stream.next(m.motor_right_err_code);
      stream.next(m.bump_enable);
      stream.next(m.cliff_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::BaseInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::BaseInfo_<ContainerAllocator>& v)
  {
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "base_device_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_device_state);
    s << indent << "cliff_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_left);
    s << indent << "cliff_front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_front_left);
    s << indent << "cliff_front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_front_right);
    s << indent << "cliff_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_right);
    s << indent << "bump_state_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_state_left);
    s << indent << "bump_state_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_state_right);
    s << indent << "chargingVol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.chargingVol);
    s << indent << "chargingState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chargingState);
    s << indent << "motor_left_err_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_left_err_code);
    s << indent << "motor_right_err_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_right_err_code);
    s << indent << "bump_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_enable);
    s << indent << "cliff_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_BASEINFO_H
