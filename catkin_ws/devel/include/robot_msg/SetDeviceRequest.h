// Generated by gencpp from file robot_msg/SetDeviceRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_SETDEVICEREQUEST_H
#define ROBOT_MSG_MESSAGE_SETDEVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct SetDeviceRequest_
{
  typedef SetDeviceRequest_<ContainerAllocator> Type;

  SetDeviceRequest_()
    : device_id()
    , cmd()
    , parameter1(0)
    , parameter2(0)  {
    }
  SetDeviceRequest_(const ContainerAllocator& _alloc)
    : device_id(_alloc)
    , cmd(_alloc)
    , parameter1(0)
    , parameter2(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_id_type;
  _device_id_type device_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;

   typedef int32_t _parameter1_type;
  _parameter1_type parameter1;

   typedef int32_t _parameter2_type;
  _parameter2_type parameter2;





  typedef boost::shared_ptr< ::robot_msg::SetDeviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::SetDeviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetDeviceRequest_

typedef ::robot_msg::SetDeviceRequest_<std::allocator<void> > SetDeviceRequest;

typedef boost::shared_ptr< ::robot_msg::SetDeviceRequest > SetDeviceRequestPtr;
typedef boost::shared_ptr< ::robot_msg::SetDeviceRequest const> SetDeviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::SetDeviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::SetDeviceRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetDeviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.device_id == rhs.device_id &&
    lhs.cmd == rhs.cmd &&
    lhs.parameter1 == rhs.parameter1 &&
    lhs.parameter2 == rhs.parameter2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::SetDeviceRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetDeviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetDeviceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetDeviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetDeviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f106c1f9f8a8140fe8f99ed8cf38a8b";
  }

  static const char* value(const ::robot_msg::SetDeviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f106c1f9f8a8140ULL;
  static const uint64_t static_value2 = 0xfe8f99ed8cf38a8bULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/SetDeviceRequest";
  }

  static const char* value(const ::robot_msg::SetDeviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# srv definition\n"
"\n"
"#request constants\n"
"# device_id:            cmd                 param1           param2\n"
"#    \"motor\"\n"
"#                       \"release_motor\"     0： 上电锁轴\n"
"#                                           1: 下电松轴\n"
"#    \"humidifier\"\n"
"#                       \"power\"             0： 开机\n"
"#                                           1： 关机\n"
"#                       \"fog_level\"         雾量等级\n"
"#\n"
"#request fields\n"
"string  device_id       # 硬件设备id\n"
"string  cmd             # 命令id\n"
"int32   parameter1      # 参数1\n"
"int32   parameter2      # 参数2\n"
;
  }

  static const char* value(const ::robot_msg::SetDeviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.cmd);
      stream.next(m.parameter1);
      stream.next(m.parameter2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetDeviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::SetDeviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::SetDeviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device_id);
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "parameter1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parameter1);
    s << indent << "parameter2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parameter2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_SETDEVICEREQUEST_H
