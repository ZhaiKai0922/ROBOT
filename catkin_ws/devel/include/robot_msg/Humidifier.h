// Generated by gencpp from file robot_msg/Humidifier.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_HUMIDIFIER_H
#define ROBOT_MSG_MESSAGE_HUMIDIFIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct Humidifier_
{
  typedef Humidifier_<ContainerAllocator> Type;

  Humidifier_()
    : power_state(0)
    , fog_level(0)
    , warn_water_low(0)  {
    }
  Humidifier_(const ContainerAllocator& _alloc)
    : power_state(0)
    , fog_level(0)
    , warn_water_low(0)  {
  (void)_alloc;
    }



   typedef uint8_t _power_state_type;
  _power_state_type power_state;

   typedef uint8_t _fog_level_type;
  _fog_level_type fog_level;

   typedef uint8_t _warn_water_low_type;
  _warn_water_low_type warn_water_low;





  typedef boost::shared_ptr< ::robot_msg::Humidifier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::Humidifier_<ContainerAllocator> const> ConstPtr;

}; // struct Humidifier_

typedef ::robot_msg::Humidifier_<std::allocator<void> > Humidifier;

typedef boost::shared_ptr< ::robot_msg::Humidifier > HumidifierPtr;
typedef boost::shared_ptr< ::robot_msg::Humidifier const> HumidifierConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::Humidifier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::Humidifier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::Humidifier_<ContainerAllocator1> & lhs, const ::robot_msg::Humidifier_<ContainerAllocator2> & rhs)
{
  return lhs.power_state == rhs.power_state &&
    lhs.fog_level == rhs.fog_level &&
    lhs.warn_water_low == rhs.warn_water_low;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::Humidifier_<ContainerAllocator1> & lhs, const ::robot_msg::Humidifier_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::Humidifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::Humidifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::Humidifier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::Humidifier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::Humidifier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::Humidifier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::Humidifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6577daff9e5c3c518197df2a56537ef";
  }

  static const char* value(const ::robot_msg::Humidifier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6577daff9e5c3c5ULL;
  static const uint64_t static_value2 = 0x18197df2a56537efULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::Humidifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/Humidifier";
  }

  static const char* value(const ::robot_msg::Humidifier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::Humidifier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# msg definition\n"
"\n"
"uint8   power_state     # 0 关机 1 开机\n"
"uint8   fog_level       # 当前设置雾量等级      1~7挡\n"
"uint8   warn_water_low      # 低水位告警状态        0 正常 1 告警\n"
;
  }

  static const char* value(const ::robot_msg::Humidifier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::Humidifier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power_state);
      stream.next(m.fog_level);
      stream.next(m.warn_water_low);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Humidifier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::Humidifier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::Humidifier_<ContainerAllocator>& v)
  {
    s << indent << "power_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_state);
    s << indent << "fog_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fog_level);
    s << indent << "warn_water_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warn_water_low);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_HUMIDIFIER_H
