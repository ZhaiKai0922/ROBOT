// Generated by gencpp from file robot_msg/FeedBack.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_FEEDBACK_H
#define ROBOT_MSG_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct FeedBack_
{
  typedef FeedBack_<ContainerAllocator> Type;

  FeedBack_()
    : feedback(0)
    , feedbackStr()  {
    }
  FeedBack_(const ContainerAllocator& _alloc)
    : feedback(0)
    , feedbackStr(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _feedback_type;
  _feedback_type feedback;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _feedbackStr_type;
  _feedbackStr_type feedbackStr;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif

  enum {
    NONE = 0,
  };


  typedef boost::shared_ptr< ::robot_msg::FeedBack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::FeedBack_<ContainerAllocator> const> ConstPtr;

}; // struct FeedBack_

typedef ::robot_msg::FeedBack_<std::allocator<void> > FeedBack;

typedef boost::shared_ptr< ::robot_msg::FeedBack > FeedBackPtr;
typedef boost::shared_ptr< ::robot_msg::FeedBack const> FeedBackConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::FeedBack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::FeedBack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::FeedBack_<ContainerAllocator1> & lhs, const ::robot_msg::FeedBack_<ContainerAllocator2> & rhs)
{
  return lhs.feedback == rhs.feedback &&
    lhs.feedbackStr == rhs.feedbackStr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::FeedBack_<ContainerAllocator1> & lhs, const ::robot_msg::FeedBack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::FeedBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::FeedBack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::FeedBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::FeedBack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::FeedBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::FeedBack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::FeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f9d77a5ebec864d5c1481f385477d58";
  }

  static const char* value(const ::robot_msg::FeedBack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f9d77a5ebec864dULL;
  static const uint64_t static_value2 = 0x5c1481f385477d58ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::FeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/FeedBack";
  }

  static const char* value(const ::robot_msg::FeedBack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::FeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# msg definition\n"
"\n"
"# feedback enum\n"
"int32 NONE              = 0 # none\n"
"                            # others...\n"
"\n"
"int32           feedback 	    # result feedback\n"
"string 		    feedbackStr  	# feedback to string\n"
;
  }

  static const char* value(const ::robot_msg::FeedBack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::FeedBack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
      stream.next(m.feedbackStr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeedBack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::FeedBack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::FeedBack_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback);
    s << indent << "feedbackStr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.feedbackStr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_FEEDBACK_H
