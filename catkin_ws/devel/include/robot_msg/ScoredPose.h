// Generated by gencpp from file robot_msg/ScoredPose.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_SCOREDPOSE_H
#define ROBOT_MSG_MESSAGE_SCOREDPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace robot_msg
{
template <class ContainerAllocator>
struct ScoredPose_
{
  typedef ScoredPose_<ContainerAllocator> Type;

  ScoredPose_()
    : header()
    , pose()
    , score(0.0)
    , opt_works_remain(0)
    , relocated(false)  {
    }
  ScoredPose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , score(0.0)
    , opt_works_remain(0)
    , relocated(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _score_type;
  _score_type score;

   typedef int16_t _opt_works_remain_type;
  _opt_works_remain_type opt_works_remain;

   typedef uint8_t _relocated_type;
  _relocated_type relocated;





  typedef boost::shared_ptr< ::robot_msg::ScoredPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::ScoredPose_<ContainerAllocator> const> ConstPtr;

}; // struct ScoredPose_

typedef ::robot_msg::ScoredPose_<std::allocator<void> > ScoredPose;

typedef boost::shared_ptr< ::robot_msg::ScoredPose > ScoredPosePtr;
typedef boost::shared_ptr< ::robot_msg::ScoredPose const> ScoredPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::ScoredPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::ScoredPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::ScoredPose_<ContainerAllocator1> & lhs, const ::robot_msg::ScoredPose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.score == rhs.score &&
    lhs.opt_works_remain == rhs.opt_works_remain &&
    lhs.relocated == rhs.relocated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::ScoredPose_<ContainerAllocator1> & lhs, const ::robot_msg::ScoredPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::ScoredPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::ScoredPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::ScoredPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::ScoredPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::ScoredPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::ScoredPose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::ScoredPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0af756687c3ab51ab296469842fee404";
  }

  static const char* value(const ::robot_msg::ScoredPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0af756687c3ab51aULL;
  static const uint64_t static_value2 = 0xb296469842fee404ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::ScoredPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/ScoredPose";
  }

  static const char* value(const ::robot_msg::ScoredPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::ScoredPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Pose pose\n"
"float32 score\n"
"int16   opt_works_remain\n"
"bool    relocated\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robot_msg::ScoredPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::ScoredPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.score);
      stream.next(m.opt_works_remain);
      stream.next(m.relocated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoredPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::ScoredPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::ScoredPose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "opt_works_remain: ";
    Printer<int16_t>::stream(s, indent + "  ", v.opt_works_remain);
    s << indent << "relocated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relocated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_SCOREDPOSE_H
