// Generated by gencpp from file robot_msg/ActionState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_ACTIONSTATE_H
#define ROBOT_MSG_MESSAGE_ACTIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct ActionState_
{
  typedef ActionState_<ContainerAllocator> Type;

  ActionState_()
    : action_state_id()
    , action_feedback(0)  {
    }
  ActionState_(const ContainerAllocator& _alloc)
    : action_state_id(_alloc)
    , action_feedback(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_state_id_type;
  _action_state_id_type action_state_id;

   typedef int32_t _action_feedback_type;
  _action_feedback_type action_feedback;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(SET_NEW_GOAL)
  #undef SET_NEW_GOAL
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(GOAL_REACHED)
  #undef GOAL_REACHED
#endif
#if defined(_WIN32) && defined(GOAL_CANCLE)
  #undef GOAL_CANCLE
#endif
#if defined(_WIN32) && defined(OBSTACLE)
  #undef OBSTACLE
#endif
#if defined(_WIN32) && defined(NO_PATH)
  #undef NO_PATH
#endif
#if defined(_WIN32) && defined(DOCKER_NOTFOUND)
  #undef DOCKER_NOTFOUND
#endif
#if defined(_WIN32) && defined(DOCKING_FAILURE)
  #undef DOCKING_FAILURE
#endif
#if defined(_WIN32) && defined(ERROR_NODEFINE)
  #undef ERROR_NODEFINE
#endif

  enum {
    NONE = 0,
    SET_NEW_GOAL = 1,
    RUNNING = 2,
    GOAL_REACHED = 3,
    GOAL_CANCLE = 4,
    OBSTACLE = 5,
    NO_PATH = 6,
    DOCKER_NOTFOUND = 7,
    DOCKING_FAILURE = 8,
    ERROR_NODEFINE = 9,
  };


  typedef boost::shared_ptr< ::robot_msg::ActionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::ActionState_<ContainerAllocator> const> ConstPtr;

}; // struct ActionState_

typedef ::robot_msg::ActionState_<std::allocator<void> > ActionState;

typedef boost::shared_ptr< ::robot_msg::ActionState > ActionStatePtr;
typedef boost::shared_ptr< ::robot_msg::ActionState const> ActionStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::ActionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::ActionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::ActionState_<ContainerAllocator1> & lhs, const ::robot_msg::ActionState_<ContainerAllocator2> & rhs)
{
  return lhs.action_state_id == rhs.action_state_id &&
    lhs.action_feedback == rhs.action_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::ActionState_<ContainerAllocator1> & lhs, const ::robot_msg::ActionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::ActionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::ActionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::ActionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::ActionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::ActionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::ActionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::ActionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a5aedc175e4d4597fe604ea49d45b40";
  }

  static const char* value(const ::robot_msg::ActionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a5aedc175e4d459ULL;
  static const uint64_t static_value2 = 0x7fe604ea49d45b40ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::ActionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/ActionState";
  }

  static const char* value(const ::robot_msg::ActionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::ActionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# msg definition\n"
"\n"
"#   action_state_id: 								\n"
"#	“idle”			    - 空闲		\n"
"#	“sleep”			    - 休眠		\n"
"#	“movebase_goal”	    - 导航到目标点		\n"
"#	”rotate”		    - 旋转一定角度（body系）	\n"
"#   “rotate_to”		    - 旋转到指定朝向（world系）\n"
"#	“go_charging”	    - 返回充电				\n"
"# 	“separate_docker”	- 脱离充电桩		\n"
"#	“remote_telep”	    - 远程遥控\n"
"\n"
"# feedback enum\n"
"int32 NONE              = 0 # none\n"
"int32 SET_NEW_GOAL      = 1 # 收到指令\n"
"int32 RUNNING           = 2 # 动作执行中\n"
"int32 GOAL_REACHED      = 3 # 成功 - 目标达到\n"
"int32 GOAL_CANCLE       = 4 # 成功 - 目标被取消\n"
"int32 OBSTACLE          = 5 # 失败 - 存在障碍物\n"
"int32 NO_PATH           = 6 # 失败 - 没有可行路径\n"
"int32 DOCKER_NOTFOUND   = 7 # 失败 - 未找到充电桩\n"
"int32 DOCKING_FAILURE   = 8 # 失败 - 对接失败\n"
"int32 ERROR_NODEFINE    = 9 # 失败 - 其他异常 STUCK\n"
"\n"
"string 		    action_state_id  	# 机器人所处功能状态id\n"
"int32           action_feedback 	# 动作执行实时状态反馈\n"
"\n"
;
  }

  static const char* value(const ::robot_msg::ActionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::ActionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_state_id);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::ActionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::ActionState_<ContainerAllocator>& v)
  {
    s << indent << "action_state_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_state_id);
    s << indent << "action_feedback: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_ACTIONSTATE_H
