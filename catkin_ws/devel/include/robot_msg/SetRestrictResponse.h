// Generated by gencpp from file robot_msg/SetRestrictResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_SETRESTRICTRESPONSE_H
#define ROBOT_MSG_MESSAGE_SETRESTRICTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msg
{
template <class ContainerAllocator>
struct SetRestrictResponse_
{
  typedef SetRestrictResponse_<ContainerAllocator> Type;

  SetRestrictResponse_()
    : result(false)
    , message_code(0)
    , message()  {
    }
  SetRestrictResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , message_code(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef int32_t _message_code_type;
  _message_code_type message_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::robot_msg::SetRestrictResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::SetRestrictResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetRestrictResponse_

typedef ::robot_msg::SetRestrictResponse_<std::allocator<void> > SetRestrictResponse;

typedef boost::shared_ptr< ::robot_msg::SetRestrictResponse > SetRestrictResponsePtr;
typedef boost::shared_ptr< ::robot_msg::SetRestrictResponse const> SetRestrictResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::SetRestrictResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::SetRestrictResponse_<ContainerAllocator1> & lhs, const ::robot_msg::SetRestrictResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.message_code == rhs.message_code &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::SetRestrictResponse_<ContainerAllocator1> & lhs, const ::robot_msg::SetRestrictResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetRestrictResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetRestrictResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetRestrictResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78947ce1619fa3db9ffcf25e821343c6";
  }

  static const char* value(const ::robot_msg::SetRestrictResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78947ce1619fa3dbULL;
  static const uint64_t static_value2 = 0x9ffcf25e821343c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/SetRestrictResponse";
  }

  static const char* value(const ::robot_msg::SetRestrictResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#response constants\n"
"#response fields\n"
"bool    result          #   执行结果，成功或者失败\n"
"int32   message_code    #   额外信息代码\n"
"string  message         #   额外信息，e.g. for error messages\n"
"\n"
;
  }

  static const char* value(const ::robot_msg::SetRestrictResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.message_code);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRestrictResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::SetRestrictResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::SetRestrictResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "message_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.message_code);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_SETRESTRICTRESPONSE_H
