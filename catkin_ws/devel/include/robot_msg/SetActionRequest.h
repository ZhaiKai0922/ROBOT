// Generated by gencpp from file robot_msg/SetActionRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_SETACTIONREQUEST_H
#define ROBOT_MSG_MESSAGE_SETACTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace robot_msg
{
template <class ContainerAllocator>
struct SetActionRequest_
{
  typedef SetActionRequest_<ContainerAllocator> Type;

  SetActionRequest_()
    : action_request_id()
    , goal()  {
    }
  SetActionRequest_(const ContainerAllocator& _alloc)
    : action_request_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_request_id_type;
  _action_request_id_type action_request_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::robot_msg::SetActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::SetActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetActionRequest_

typedef ::robot_msg::SetActionRequest_<std::allocator<void> > SetActionRequest;

typedef boost::shared_ptr< ::robot_msg::SetActionRequest > SetActionRequestPtr;
typedef boost::shared_ptr< ::robot_msg::SetActionRequest const> SetActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::SetActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::SetActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::SetActionRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action_request_id == rhs.action_request_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::SetActionRequest_<ContainerAllocator1> & lhs, const ::robot_msg::SetActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::SetActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::SetActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::SetActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0f5f90306dcb3282a753bd011a0bd01";
  }

  static const char* value(const ::robot_msg::SetActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0f5f90306dcb328ULL;
  static const uint64_t static_value2 = 0x2a753bd011a0bd01ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/SetActionRequest";
  }

  static const char* value(const ::robot_msg::SetActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# srv definition\n"
"\n"
"#request constants\n"
"#   action_request_id: 								\n"
"#	“idle”			    - 空闲		\n"
"#	“sleep”			    - 休眠		\n"
"#	“movebase_goal”	    - 导航到目标点		\n"
"#	”rotate”		    - 旋转一定角度（body系）	\n"
"#   “rotate_to”		    - 旋转到指定朝向（world系）\n"
"#	“go_charging”	    - 返回充电				\n"
"# 	“separate_docker”	- 脱离充电桩		\n"
"#	“remote_telep”	    - 远程遥控\n"
"#request fields\n"
"string                      action_request_id       # 请求id\n"
"geometry_msgs/Vector3       goal                    # 动作目标，如果动作没有具体目标值则填空\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robot_msg::SetActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::SetActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_request_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::SetActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::SetActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "action_request_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_request_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_SETACTIONREQUEST_H
